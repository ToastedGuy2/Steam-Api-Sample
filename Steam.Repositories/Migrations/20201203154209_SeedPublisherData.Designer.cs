// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Steam.Repositories;

namespace Steam.Repositories.Migrations
{
    [DbContext(typeof(SteamDbContext))]
    [Migration("20201203154209_SeedPublisherData")]
    partial class SeedPublisherData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Steam.Entities.Game", b =>
                {
                    b.Property<Guid>("GameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PublisherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ReleaseDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("GameId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Game");
                });

            modelBuilder.Entity("Steam.Entities.GameGenre", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GameId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("GameGenre");
                });

            modelBuilder.Entity("Steam.Entities.Genre", b =>
                {
                    b.Property<Guid>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GenreId");

                    b.ToTable("Genre");
                });

            modelBuilder.Entity("Steam.Entities.Publisher", b =>
                {
                    b.Property<Guid>("PublisherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PublisherId");

                    b.ToTable("Publisher");

                    b.HasData(
                        new
                        {
                            PublisherId = new Guid("97f4b78d-5752-413f-9f2e-0bfa4947d490"),
                            Name = "Capcom"
                        },
                        new
                        {
                            PublisherId = new Guid("3817acf1-4920-4c77-b2c9-d4000be9703a"),
                            Name = "Sega"
                        },
                        new
                        {
                            PublisherId = new Guid("a2bc460c-ab39-4903-81df-367bbf5453eb"),
                            Name = "Electronic Arts"
                        },
                        new
                        {
                            PublisherId = new Guid("3cac1789-e877-48f7-8dc1-fd32dad85172"),
                            Name = "Microsoft"
                        },
                        new
                        {
                            PublisherId = new Guid("ad2f4d1c-7a67-448c-a3e8-74a7cc7813a5"),
                            Name = "Ubisoft"
                        },
                        new
                        {
                            PublisherId = new Guid("589c2fd3-2a74-4f4e-90f7-400d39edcb38"),
                            Name = "Square Enix"
                        },
                        new
                        {
                            PublisherId = new Guid("af821292-a1d9-4dc4-9d27-405a4f85e48a"),
                            Name = "Bandai Namco Entertainment"
                        },
                        new
                        {
                            PublisherId = new Guid("81d46aa2-d8a0-4dcb-82a7-9f32f05eddb3"),
                            Name = "THQ Nordic"
                        },
                        new
                        {
                            PublisherId = new Guid("9d30ed06-41be-4e27-b16c-34e65015dcc8"),
                            Name = "Red Barrel"
                        },
                        new
                        {
                            PublisherId = new Guid("098280de-4136-47a9-93c5-0fe594638105"),
                            Name = "Sony"
                        });
                });

            modelBuilder.Entity("Steam.Entities.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Steam.Entities.UserGame", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "GameId");

                    b.HasIndex("GameId");

                    b.ToTable("UserGame");
                });

            modelBuilder.Entity("Steam.Entities.Game", b =>
                {
                    b.HasOne("Steam.Entities.Publisher", "Publisher")
                        .WithMany("GamesDeveloped")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Steam.Entities.GameGenre", b =>
                {
                    b.HasOne("Steam.Entities.Game", "Game")
                        .WithMany("Genres")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Steam.Entities.Genre", "Genre")
                        .WithMany("Games")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Steam.Entities.UserGame", b =>
                {
                    b.HasOne("Steam.Entities.Game", "Game")
                        .WithMany("UsersWhoBoughtTheGame")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Steam.Entities.User", "User")
                        .WithMany("OwnedGames")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
