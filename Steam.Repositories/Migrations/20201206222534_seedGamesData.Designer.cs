// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Steam.Repositories;

namespace Steam.Repositories.Migrations
{
    [DbContext(typeof(SteamDbContext))]
    [Migration("20201206222534_seedGamesData")]
    partial class seedGamesData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Steam.Entities.Game", b =>
                {
                    b.Property<Guid>("GameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<Guid>("PublisherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ReleaseDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("GameId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Game");

                    b.HasData(
                        new
                        {
                            GameId = new Guid("d3b9353b-81fb-4440-bfde-02477d749523"),
                            Name = "Resident Evil (Remake)",
                            Price = 19.989999999999998,
                            PublisherId = new Guid("97f4b78d-5752-413f-9f2e-0bfa4947d490"),
                            ReleaseDate = new DateTimeOffset(new DateTime(2002, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, -6, 0, 0, 0))
                        },
                        new
                        {
                            GameId = new Guid("39b1c665-85fc-497b-ad67-6e564378d7b6"),
                            Name = "Resident Evil 2 (Remake)",
                            Price = 39.990000000000002,
                            PublisherId = new Guid("97f4b78d-5752-413f-9f2e-0bfa4947d490"),
                            ReleaseDate = new DateTimeOffset(new DateTime(2019, 1, 25, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, -6, 0, 0, 0))
                        },
                        new
                        {
                            GameId = new Guid("af4226d2-a907-4cc9-baaf-6ec82a6d6ba4"),
                            Name = "Resident Evil 3 (Remake)",
                            Price = 39.990000000000002,
                            PublisherId = new Guid("97f4b78d-5752-413f-9f2e-0bfa4947d490"),
                            ReleaseDate = new DateTimeOffset(new DateTime(2020, 4, 3, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, -6, 0, 0, 0))
                        },
                        new
                        {
                            GameId = new Guid("bb697f12-3466-4b1d-a653-5fa47ce73b37"),
                            Name = "Resident Evil 4",
                            Price = 29.989999999999998,
                            PublisherId = new Guid("97f4b78d-5752-413f-9f2e-0bfa4947d490"),
                            ReleaseDate = new DateTimeOffset(new DateTime(2005, 1, 11, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, -6, 0, 0, 0))
                        },
                        new
                        {
                            GameId = new Guid("05030f44-1cc1-4705-8425-dff570338af0"),
                            Name = "Sonic the Hedgehog",
                            Price = 4.9900000000000002,
                            PublisherId = new Guid("3817acf1-4920-4c77-b2c9-d4000be9703a"),
                            ReleaseDate = new DateTimeOffset(new DateTime(1999, 1, 11, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, -6, 0, 0, 0))
                        },
                        new
                        {
                            GameId = new Guid("842fa951-5862-47c4-8247-2fd58f9e925b"),
                            Name = "Mass Effect 2",
                            Price = 9.9900000000000002,
                            PublisherId = new Guid("a2bc460c-ab39-4903-81df-367bbf5453eb"),
                            ReleaseDate = new DateTimeOffset(new DateTime(2011, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, -6, 0, 0, 0))
                        },
                        new
                        {
                            GameId = new Guid("38e31c2b-2fb5-4674-87a6-5058044776e6"),
                            Name = "The Sims 4: Snowy Escape",
                            Price = 9.9900000000000002,
                            PublisherId = new Guid("a2bc460c-ab39-4903-81df-367bbf5453eb"),
                            ReleaseDate = new DateTimeOffset(new DateTime(2020, 11, 13, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, -6, 0, 0, 0))
                        },
                        new
                        {
                            GameId = new Guid("122abc80-dd11-482c-8a9e-84d64491c9f8"),
                            Name = "Need for Speed: Hot Pursuit Remastered",
                            Price = 9.9900000000000002,
                            PublisherId = new Guid("a2bc460c-ab39-4903-81df-367bbf5453eb"),
                            ReleaseDate = new DateTimeOffset(new DateTime(2020, 11, 6, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, -6, 0, 0, 0))
                        },
                        new
                        {
                            GameId = new Guid("bd162050-adb1-4aaf-92ac-4ed34365acd6"),
                            Name = "Halo: The Master Chief Collection",
                            Price = 49.990000000000002,
                            PublisherId = new Guid("3cac1789-e877-48f7-8dc1-fd32dad85172"),
                            ReleaseDate = new DateTimeOffset(new DateTime(2019, 12, 3, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, -6, 0, 0, 0))
                        },
                        new
                        {
                            GameId = new Guid("3b90fc64-88da-4a94-897a-14ce088cfc11"),
                            Name = "Watch Dogs: Legion",
                            Price = 60.0,
                            PublisherId = new Guid("a4d1cd2f-7a67-448c-a3e8-74a7cc7813a5"),
                            ReleaseDate = new DateTimeOffset(new DateTime(2020, 12, 7, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, -6, 0, 0, 0))
                        },
                        new
                        {
                            GameId = new Guid("5a8f9dd9-eb68-4432-ab85-cea83ad8c081"),
                            Name = "Assassin's Creed Valhalla",
                            Price = 59.990000000000002,
                            PublisherId = new Guid("a4d1cd2f-7a67-448c-a3e8-74a7cc7813a5"),
                            ReleaseDate = new DateTimeOffset(new DateTime(2020, 12, 3, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, -6, 0, 0, 0))
                        },
                        new
                        {
                            GameId = new Guid("761ee81a-aebd-48fc-a76d-14bd94d05203"),
                            Name = "Final Fantasy XVI",
                            Price = 39.990000000000002,
                            PublisherId = new Guid("589c2fd3-2a74-4f4e-90f7-400d39edcb38"),
                            ReleaseDate = new DateTimeOffset(new DateTime(2020, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, -6, 0, 0, 0))
                        },
                        new
                        {
                            GameId = new Guid("5fad36b3-deb3-4c6a-8308-504a1d8caa28"),
                            Name = "Dragon Quest Tact",
                            Price = 59.990000000000002,
                            PublisherId = new Guid("589c2fd3-2a74-4f4e-90f7-400d39edcb38"),
                            ReleaseDate = new DateTimeOffset(new DateTime(2020, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, -6, 0, 0, 0))
                        },
                        new
                        {
                            GameId = new Guid("757bd454-56bb-4ea7-82a6-44b908865009"),
                            Name = "Kingdom Hearts: Melody of Memory",
                            Price = 19.989999999999998,
                            PublisherId = new Guid("589c2fd3-2a74-4f4e-90f7-400d39edcb38"),
                            ReleaseDate = new DateTimeOffset(new DateTime(2020, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, -6, 0, 0, 0))
                        },
                        new
                        {
                            GameId = new Guid("efe0895e-5734-4bd1-b57f-4c286b209df4"),
                            Name = "Dragon Ball Z: Kakarot",
                            Price = 99.989999999999995,
                            PublisherId = new Guid("af821292-a1d9-4dc4-9d27-405a4f85e48a"),
                            ReleaseDate = new DateTimeOffset(new DateTime(2020, 11, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, -6, 0, 0, 0))
                        },
                        new
                        {
                            GameId = new Guid("dc436a80-ad4f-4629-ae05-3d3e3b703e9b"),
                            Name = "Darksiders 3",
                            Price = 39.990000000000002,
                            PublisherId = new Guid("81d46aa2-d8a0-4dcb-82a7-9f32f05eddb3"),
                            ReleaseDate = new DateTimeOffset(new DateTime(2019, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, -6, 0, 0, 0))
                        },
                        new
                        {
                            GameId = new Guid("d88627ba-cbdf-442d-a292-2d9391fa6b01"),
                            Name = "Outlast",
                            Price = 39.990000000000002,
                            PublisherId = new Guid("9d30ed06-41be-4e27-b16c-34e65015dcc8"),
                            ReleaseDate = new DateTimeOffset(new DateTime(2013, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, -6, 0, 0, 0))
                        },
                        new
                        {
                            GameId = new Guid("6cdb208d-5c10-4b3c-bc7b-59a8969090ed"),
                            Name = "Outlast Whistleblower",
                            Price = 19.989999999999998,
                            PublisherId = new Guid("9d30ed06-41be-4e27-b16c-34e65015dcc8"),
                            ReleaseDate = new DateTimeOffset(new DateTime(2013, 8, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, -6, 0, 0, 0))
                        },
                        new
                        {
                            GameId = new Guid("84f75268-f146-4d74-ae4b-9f403ffc8b5d"),
                            Name = "Outlast 2",
                            Price = 59.990000000000002,
                            PublisherId = new Guid("9d30ed06-41be-4e27-b16c-34e65015dcc8"),
                            ReleaseDate = new DateTimeOffset(new DateTime(2017, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, -6, 0, 0, 0))
                        },
                        new
                        {
                            GameId = new Guid("16d88b83-d04f-4f1c-8f0f-da3caaf88f9c"),
                            Name = "Outlast Trials",
                            Price = 99.989999999999995,
                            PublisherId = new Guid("9d30ed06-41be-4e27-b16c-34e65015dcc8"),
                            ReleaseDate = new DateTimeOffset(new DateTime(2021, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, -6, 0, 0, 0))
                        },
                        new
                        {
                            GameId = new Guid("0821cc45-1c31-48a9-933e-4a01d9128d29"),
                            Name = "Horizon Zero Dawn™ Complete Edition",
                            Price = 99.989999999999995,
                            PublisherId = new Guid("098280de-4136-47a9-93c5-0fe594638105"),
                            ReleaseDate = new DateTimeOffset(new DateTime(2020, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, -6, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("Steam.Entities.GameGenre", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GameId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("GameGenre");
                });

            modelBuilder.Entity("Steam.Entities.Genre", b =>
                {
                    b.Property<Guid>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GenreId");

                    b.ToTable("Genre");
                });

            modelBuilder.Entity("Steam.Entities.Publisher", b =>
                {
                    b.Property<Guid>("PublisherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PublisherId");

                    b.ToTable("Publisher");

                    b.HasData(
                        new
                        {
                            PublisherId = new Guid("97f4b78d-5752-413f-9f2e-0bfa4947d490"),
                            Name = "Capcom"
                        },
                        new
                        {
                            PublisherId = new Guid("3817acf1-4920-4c77-b2c9-d4000be9703a"),
                            Name = "Sega"
                        },
                        new
                        {
                            PublisherId = new Guid("a2bc460c-ab39-4903-81df-367bbf5453eb"),
                            Name = "Electronic Arts"
                        },
                        new
                        {
                            PublisherId = new Guid("3cac1789-e877-48f7-8dc1-fd32dad85172"),
                            Name = "Xbox Game Studios"
                        },
                        new
                        {
                            PublisherId = new Guid("a4d1cd2f-7a67-448c-a3e8-74a7cc7813a5"),
                            Name = "Ubisoft"
                        },
                        new
                        {
                            PublisherId = new Guid("589c2fd3-2a74-4f4e-90f7-400d39edcb38"),
                            Name = "Square Enix"
                        },
                        new
                        {
                            PublisherId = new Guid("af821292-a1d9-4dc4-9d27-405a4f85e48a"),
                            Name = "Bandai Namco Entertainment"
                        },
                        new
                        {
                            PublisherId = new Guid("81d46aa2-d8a0-4dcb-82a7-9f32f05eddb3"),
                            Name = "THQ Nordic"
                        },
                        new
                        {
                            PublisherId = new Guid("9d30ed06-41be-4e27-b16c-34e65015dcc8"),
                            Name = "Red Barrel"
                        },
                        new
                        {
                            PublisherId = new Guid("098280de-4136-47a9-93c5-0fe594638105"),
                            Name = "PlayStation Mobile, Inc."
                        });
                });

            modelBuilder.Entity("Steam.Entities.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Steam.Entities.UserGame", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "GameId");

                    b.HasIndex("GameId");

                    b.ToTable("UserGame");
                });

            modelBuilder.Entity("Steam.Entities.Game", b =>
                {
                    b.HasOne("Steam.Entities.Publisher", "Publisher")
                        .WithMany("GamesDeveloped")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Steam.Entities.GameGenre", b =>
                {
                    b.HasOne("Steam.Entities.Game", "Game")
                        .WithMany("Genres")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Steam.Entities.Genre", "Genre")
                        .WithMany("Games")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Steam.Entities.UserGame", b =>
                {
                    b.HasOne("Steam.Entities.Game", "Game")
                        .WithMany("UsersWhoBoughtTheGame")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Steam.Entities.User", "User")
                        .WithMany("OwnedGames")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
